(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.GoogleAnalytics = {}));
})(this, (function (exports) { 'use strict';

    function noop() { }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function load (urls, test, callback) {
      let remaining = urls.length;

      function maybeCallback () {
        remaining = --remaining;
        if (remaining < 1) {
          callback();
        }
      }

      if (test()) {
        return callback()
      }

      for (const { type, url, options = { async: true, defer: true }} of urls) {
        const isScript = type === 'script';
        const tag = document.createElement(isScript ? 'script': 'link');
        if (isScript) {
          tag.src = url;
          tag.async = options.async;
          tag.defer = options.defer;
        } else {
          tag.rel = 'stylesheet';
          tag.href = url;
        }
        tag.onload = maybeCallback;
        document.body.appendChild(tag);
      }
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    const gaStore = writable([]);

    /* src/GoogleAnalytics.svelte generated by Svelte v3.48.0 */

    function test() {
    	return Boolean(window.dataLayer).valueOf() && Array.isArray(window.dataLayer);
    }

    function gtag() {
    	window.dataLayer.push(arguments);
    }

    function instance($$self, $$props, $$invalidate) {
    	let { properties } = $$props;
    	let { configurations = {} } = $$props;
    	let { enabled = true } = $$props;

    	onMount(() => {
    		if (!enabled) {
    			return;
    		}

    		init();
    	});

    	function init() {
    		const mainProperty = properties[0];

    		load(
    			[
    				{
    					type: 'script',
    					url: `//www.googletagmanager.com/gtag/js?id=${mainProperty}`
    				}
    			],
    			test,
    			callback
    		);
    	}

    	function callback() {
    		window.dataLayer = window.dataLayer || [];
    		gtag('js', new Date());

    		properties.forEach(p => {
    			gtag('config', p, configurations[p] || {});
    		});

    		return gaStore.subscribe(queue => {
    			let next = queue.length && queue.shift();

    			while (next) {
    				const { type, event, data } = next;
    				gtag(type, event, data);
    				next = queue.shift();
    			}
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('properties' in $$props) $$invalidate(0, properties = $$props.properties);
    		if ('configurations' in $$props) $$invalidate(1, configurations = $$props.configurations);
    		if ('enabled' in $$props) $$invalidate(2, enabled = $$props.enabled);
    	};

    	return [properties, configurations, enabled, init];
    }

    class GoogleAnalytics extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance, null, safe_not_equal, {
    			properties: 0,
    			configurations: 1,
    			enabled: 2,
    			init: 3
    		});
    	}

    	get init() {
    		return this.$$.ctx[3];
    	}
    }

    function addEvent (event, data) {
      if (!data.send_to) { delete data.send_to; }
      gaStore.update(exisiting => [ ...exisiting, { type: 'event', event, data } ]);
    }

    function setUserProperties (data) {
      gaStore.update(exisiting => [ ...exisiting, { type: 'set', event: 'user_properties', data } ]);
    }

    function setUserId (id) {
      gaStore.update(exisiting => [ ...exisiting, { type: 'set', event: 'userId', data: id } ]);
    }

    function setConfig (id, config = {}) {
      gaStore.update(exisiting => [ ...exisiting, { type: 'config', event: id, data: config } ]);
    }

    /**
     * all events
     * https://support.google.com/analytics/answer/9267735
     **/
    const all = {
      /**
       * when a user has earned virtual currency
       **/
      earnVirtualCurrency: function eventName (virtual_currency_name, value, send_to) {
        addEvent('earn_virtual_currency', { virtual_currency_name, value, send_to });
      },

      /**
       * when a user joins a group
       **/
      joinGroup: function eventName (group_id, send_to) {
        addEvent('join_group', { group_id, send_to });
      },

      /**
       * when a user logs in.
       **/
      login: function eventName (method, send_to) {
        addEvent('login', { method, send_to });
      },

      /**
       * when a user completes a purchase
       **/
      purchase: function eventName (transaction_id, value, currency, tax, shipping, items, coupon, send_to) {
        addEvent('purchase', { transaction_id, value, currency, tax, shipping, items, coupon, send_to });
      },

      /**
       * when a user receives a refund
       **/
      refund: function eventName (transaction_id, value, currency, tax, shipping, items, send_to) {
        addEvent('refund', { transaction_id, value, currency, tax, shipping, items, send_to });
      },

      /**
       * when a user searches your content
       **/
      search: function eventName (search_term, send_to) {
        addEvent('search', { search_term, send_to });
      },

      /**
       * when a user has selected content
       **/
      selectContent: function eventName (content_type, item_id, send_to) {
        addEvent('select_content', { content_type, item_id, send_to });
      },

      /**
       * when a user has shared content
       **/
      share: function eventName (content_type, item_id, send_to) {
        addEvent('share', { content_type, item_id, send_to });
      },

      /**
       *
       **/
      signUp: function eventName (method, send_to) {
        addEvent('sign_up', { method, send_to });
      },

      /**
       * when a user has spent virtual currency (coins, gems, tokens, etc.)
       **/
      spendVirtualCurrency: function eventName (item_name, virtual_currency_name, value, send_to) {
        addEvent('spend_virtual_currency', { item_name, virtual_currency_name, value, send_to });
      },

      /**
       * when a user begins a tutorial
       **/
      tutorialBegin: function eventName () {
        addEvent('tutorial_begin', { });
      },

      /**
       * When a user completes a tutorial
       **/
      tutorialComplete: function eventName () {
        addEvent('tutorial_complete', { });
      }
    };

    /**
     * ecommerce events
     * https://support.google.com/analytics/answer/9268036
     **/
    const ecommerce = {
      /**
       * when a user submits their payment information
       **/
      addPaymentInfo: function eventName (coupon, currency, items, payment_type, value, send_to) {
        addEvent('add_payment_info', { coupon, currency, items, payment_type, value, send_to });
      },

      /**
       * when a user submits their shipping information
       **/
      addShippingInfo: function eventName (coupon, currency, items, shipping_tier, value, send_to) {
        addEvent('add_shipping_info', { coupon, currency, items, shipping_tier, value, send_to });
      },

      /**
       * when a user adds items to cart
       **/
      addToCart: function eventName (currency, items, value, send_to) {
        addEvent('add_to_cart', { currency, items, value, send_to });
      },

      /**
       * when a user adds items to a wishlist
       **/
      addToWishlist: function eventName (currency, items, value, send_to) {
        addEvent('add_to_wishlist', { currency, items, value, send_to });
      },

      /**
       * when a user begins checkout
       **/
      beginCheckout: function eventName (coupon, currency, items, value, send_to) {
        addEvent('begin_checkout', { coupon, currency, items, value, send_to });
      },

      /**
       * when a user submits a form or request for information
       **/
      generateLead: function eventName (value, currency, send_to) {
        addEvent('generate_lead', { value, currency, send_to });
      },

      /**
       * when a user completes a purchase
       **/
      purchase: function eventName (affiliation, coupon, currency, items, transaction_id, shipping, tax, value, send_to) {
        addEvent('purchase', { affiliation, coupon, currency, items, transaction_id, shipping, tax, value, send_to });
      },

      /**
       * when a refund is issued
       **/
      refund: function eventName (affiliation, coupon, currency, items, transaction_id, shipping, tax, value, send_to) {
        addEvent('refund', { affiliation, coupon, currency, items, transaction_id, shipping, tax, value, send_to });
      },

      /**
       * when a user removes items from a cart
       **/
      removeFromCart: function eventName (currency, items, value, send_to) {
        addEvent('remove_from_cart', { currency, items, value, send_to });
      },

      /**
       * when an item is selected from a list
       **/
      selectItem: function eventName (items, item_list_name, item_list_id, send_to) {
        addEvent('select_item', { items, item_list_name, item_list_id, send_to });
      },

      /**
       * when a user selects a promotion
       **/
      selectPromotion: function eventName (items, promotion_id, promotion_name, creative_name, creative_slot, location_id, send_to) {
        addEvent('select_promotion', { items, promotion_id, promotion_name, creative_name, creative_slot, location_id, send_to });
      },

      /**
       * when a user views their cart
       **/
      viewCart: function eventName (currency, items, value, send_to) {
        addEvent('view_cart', { currency, items, value, send_to });
      },

      /**
       * when a user views an item
       **/
      viewItem: function eventName (currency, items, value, send_to) {
        addEvent('view_item', { currency, items, value, send_to });
      },

      /**
       * when a user sees a list of items/offerings
       **/
      viewItemList: function eventName (items, item_list_name, item_list_id, send_to) {
        addEvent('view_item_list', { items, item_list_name, item_list_id, send_to });
      },

      /**
       * when a promotion is shown to a user
       **/
      viewPromotion: function eventName (items, promotion_id, promotion_name, creative_name, creative_slot, location_id, send_to) {
        addEvent('view_promotion', { items, promotion_id, promotion_name, creative_name, creative_slot, location_id, send_to });
      }
    };

    /**
     * retail events
     * https://support.google.com/analytics/answer/9268037
     **/
    const retail = {
      /**
       * when a user submits their payment information
       **/
      addPaymentInfo: function eventName (coupon, currency, items, payment_type, value, send_to) {
        addEvent('add_payment_info', { coupon, currency, items, payment_type, value, send_to });
      },

      /**
       * when a user submits their shipping information
       **/
      addShippingInfo: function eventName (coupon, currency, items, shipping_tier, value, send_to) {
        addEvent('add_shipping_info', { coupon, currency, items, shipping_tier, value, send_to });
      },

      /**
       * when a user adds items to cart
       **/
      addToCart: function eventName (currency, items, value, send_to) {
        addEvent('add_to_cart', { currency, items, value, send_to });
      },

      /**
       * when a user adds items to a wishlist
       **/
      addToWishlist: function eventName (currency, items, value, send_to) {
        addEvent('add_to_wishlist', { currency, items, value, send_to });
      },

      /**
       * when a user begins checkout
       **/
      beginCheckout: function eventName (coupon, currency, items, value, send_to) {
        addEvent('begin_checkout', { coupon, currency, items, value, send_to });
      },

      /**
       * when items are purchased by a user
       **/
      purchase: function eventName (affiliation, coupon, currency, items, transaction_id, shipping, tax, value, send_to) {
        addEvent('purchase', { affiliation, coupon, currency, items, transaction_id, shipping, tax, value, send_to });
      },

      /**
       * when a refund is issued
       **/
      refund: function eventName (affiliation, coupon, currency, items, transaction_id, shipping, tax, value, send_to) {
        addEvent('refund', { affiliation, coupon, currency, items, transaction_id, shipping, tax, value, send_to });
      },

      /**
       * when a user removes items from a cart
       **/
      removeFromCart: function eventName (currency, items, value, send_to) {
        addEvent('remove_from_cart', { currency, items, value, send_to });
      },

      /**
       * when an item is selected from a list
       **/
      selectItem: function eventName (items, item_list_name, item_list_id, send_to) {
        addEvent('select_item', { items, item_list_name, item_list_id, send_to });
      },

      /**
       * when a user selects a promotion
       **/
      selectPromotion: function eventName (items, promotion_id, promotion_name, creative_name, creative_slot, location_id, send_to) {
        addEvent('select_promotion', { items, promotion_id, promotion_name, creative_name, creative_slot, location_id, send_to });
      },

      /**
       * when a user views their cart
       **/
      viewCart: function eventName (currency, items, value, send_to) {
        addEvent('view_cart', { currency, items, value, send_to });
      },

      /**
       * when a user views an item
       **/
      viewItem: function eventName (currency, items, value, send_to) {
        addEvent('view_item', { currency, items, value, send_to });
      },

      /**
       * when a user sees a list of items/offerings
       **/
      viewItemList: function eventName (items, item_list_name, item_list_id, send_to) {
        addEvent('view_item_list', { items, item_list_name, item_list_id, send_to });
      },

      /**
       * when a promotion is shown to a user
       **/
      viewPromotion: function eventName (items, promotion_id, promotion_name, creative_name, creative_slot, location_id, send_to) {
        addEvent('view_promotion', { items, promotion_id, promotion_name, creative_name, creative_slot, location_id, send_to });
      }
    };

    /**
     * travel events
     * https://support.google.com/analytics/answer/9267738
     **/
    const travel = {
      /**
       * when a user submits their payment information
       **/
      addPaymentInfo: function eventName (coupon, currency, items, payment_type, value, send_to) {
        addEvent('add_payment_info', { coupon, currency, items, payment_type, value, send_to });
      },

      /**
       * when a user submits their shipping information
       **/
      addShippingInfo: function eventName (coupon, currency, items, shipping_tier, value, send_to) {
        addEvent('add_shipping_info', { coupon, currency, items, shipping_tier, value, send_to });
      },

      /**
       * when a user adds items to cart
       **/
      addToCart: function eventName (currency, items, value, send_to) {
        addEvent('add_to_cart', { currency, items, value, send_to });
      },

      /**
       * when a user adds items to a wishlist
       **/
      addToWishlist: function eventName (currency, items, value, send_to) {
        addEvent('add_to_wishlist', { currency, items, value, send_to });
      },

      /**
       * when a user begins checkout
       **/
      beginCheckout: function eventName (coupon, currency, items, value, send_to) {
        addEvent('begin_checkout', { coupon, currency, items, value, send_to });
      },

      /**
       * when a user submits a form or request for information
       **/
      generateLead: function eventName (value, currency, send_to) {
        addEvent('generate_lead', { value, currency, send_to });
      },

      /**
       * when items are purchased by a user
       **/
      purchase: function eventName (affiliation, coupon, currency, items, transaction_id, shipping, tax, value, send_to) {
        addEvent('purchase', { affiliation, coupon, currency, items, transaction_id, shipping, tax, value, send_to });
      },

      /**
       * when a refund is issued
       **/
      refund: function eventName (affiliation, coupon, currency, items, transaction_id, shipping, tax, value, send_to) {
        addEvent('refund', { affiliation, coupon, currency, items, transaction_id, shipping, tax, value, send_to });
      },

      /**
       * when a user removes items from a cart
       **/
      removeFromCart: function eventName (currency, items, value, send_to) {
        addEvent('remove_from_cart', { currency, items, value, send_to });
      },

      /**
       * when an item is selected from a list
       **/
      selectItem: function eventName (items, item_list_name, item_list_id, send_to) {
        addEvent('select_item', { items, item_list_name, item_list_id, send_to });
      },

      /**
       * when a user selects a promotion
       **/
      selectPromotion: function eventName (items, promotion_id, promotion_name, creative_name, creative_slot, location_id, send_to) {
        addEvent('select_promotion', { items, promotion_id, promotion_name, creative_name, creative_slot, location_id, send_to });
      },

      /**
       * when a user views their cart
       **/
      viewCart: function eventName (currency, items, value, send_to) {
        addEvent('view_cart', { currency, items, value, send_to });
      },

      /**
       * when a user views an item
       **/
      viewItem: function eventName (currency, items, value, send_to) {
        addEvent('view_item', { currency, items, value, send_to });
      },

      /**
       * when a user sees a list of items/offerings
       **/
      viewItemList: function eventName (items, item_list_name, item_list_id, send_to) {
        addEvent('view_item_list', { items, item_list_name, item_list_id, send_to });
      },

      /**
       * when a promotion is shown to a user
       **/
      viewPromotion: function eventName (items, promotion_id, promotion_name, creative_name, creative_slot, location_id, send_to) {
        addEvent('view_promotion', { items, promotion_id, promotion_name, creative_name, creative_slot, location_id, send_to });
      }
    };

    /**
     * games events
     * https://support.google.com/analytics/answer/9267565
     **/
    const games = {
      /**
       * when a user has earned virtual currency (coins, gems, tokens, etc.)
       **/
      earnVirtualCurrency: function eventName (virtual_currency_name, value, send_to) {
        addEvent('earn_virtual_currency', { virtual_currency_name, value, send_to });
      },

      /**
       * when a user joins a group. Allows you to track the popularity of various clans or user groups
       **/
      joinGroup: function eventName (group_id, send_to) {
        addEvent('join_group', { group_id, send_to });
      },

      /**
       * when a user completes a level in the game
       **/
      levelEnd: function eventName (level_name, success, send_to) {
        addEvent('level_end', { level_name, success, send_to });
      },

      /**
       * when a user starts a new level in the game
       **/
      levelStart: function eventName (level_name, send_to) {
        addEvent('level_start', { level_name, send_to });
      },

      /**
       * when a player levels-up in the game
       **/
      levelUp: function eventName (character, level, send_to) {
        addEvent('level_up', { character, level, send_to });
      },

      /**
       * when a player posts his or her score
       **/
      postScore: function eventName (level, character, score, send_to) {
        addEvent('post_score', { level, character, score, send_to });
      },

      /**
       * when a user has selected content
       **/
      selectContent: function eventName (content_type, item_id, send_to) {
        addEvent('select_content', { content_type, item_id, send_to });
      },

      /**
       * when a user has spent virtual currency (coins, gems, tokens, etc.)
       **/
      spendVirtualCurrency: function eventName (item_name, virtual_currency_name, value, send_to) {
        addEvent('spend_virtual_currency', { item_name, virtual_currency_name, value, send_to });
      },

      /**
       * when a user begins a tutorial
       **/
      tutorialBegin: function eventName () {
        addEvent('tutorial_begin', { });
      },

      /**
       * when a user completes a tutorial
       **/
      tutorialComplete: function eventName () {
        addEvent('tutorial_complete', { });
      },

      /**
       * when a player unlocks an achievement
       **/
      unlockAchievement: function eventName (achievement_id, send_to) {
        addEvent('unlock_achievement', { achievement_id, send_to });
      }
    };

    var functions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        addEvent: addEvent,
        setUserProperties: setUserProperties,
        setUserId: setUserId,
        setConfig: setConfig,
        all: all,
        ecommerce: ecommerce,
        retail: retail,
        travel: travel,
        games: games
    });

    exports.GoogleAnalytics = GoogleAnalytics;
    exports.ga = functions;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
